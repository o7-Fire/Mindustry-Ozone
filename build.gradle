import java.nio.file.Files
import java.nio.file.OpenOption
import java.nio.file.StandardOpenOption
import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

}


allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
        jcenter()
    }

    ext {
        modsBuilder = "javac"
        if (project.hasProperty("builder"))
            modsBuilder = builder
        else
            modsBuilder = System.getProperty("user.name")

        def atomMeta = new File(rootDir, "src/main/resources/Manifest.properties")
        def manifestMeta = new File(rootDir, "Manifest/src/main/resources/Manifest.properties")
        try {
            atomMeta.delete()
            atomMeta.createNewFile()
        }catch(ignored){}
        try {
            manifestMeta.delete()
            manifestMeta.createNewFile()
        }catch(ignored){}

        Date d = new Date();
        Formatter formatter = new Formatter();
        Calendar c = Calendar.getInstance();
        c.setTime(d);
        StringBuilder sb = new StringBuilder();
        sb.append("AtomHash").append("=").append(atomHash).append("\n")
        sb.append("ArcHash").append("=").append(arcHash).append("\n")
        sb.append("MindustryVersion").append("=").append(mindustryVersion).append("\n")
        sb.append("VHash").append("=").append(version).append("\n")
        sb.append("ModsBuilder").append("=").append(modsBuilder).append("\n")
        sb.append("TimeStamp").append("=").append(formatter.format(Locale.UK, "%tl:%tM:%tS %tp %tB %te, %tY", c, c, c, c, c, c, c).toString()).append("\n")
        sb.append("TimeMilis").append("=").append(String.valueOf(System.currentTimeMillis())).append("\n")
        sb.append("ManifestVersion").append("=").append("v2.2").append("\n")
        sb.append("Note").append("=").append(Note)
        if(atomMeta.exists()) {
            Files.write(atomMeta.toPath(), sb.toString().getBytes(), StandardOpenOption.WRITE, StandardOpenOption.CREATE);
        }
        if(manifestMeta.exists())
            Files.write(manifestMeta.toPath(), sb.toString().getBytes(), StandardOpenOption.WRITE, StandardOpenOption.CREATE);



    }

    dependencies {
        testImplementation 'junit:junit:4.12'
        implementation 'io.sentry:sentry:4.0.0-alpha.2'
        compileOnly ("com.github.o7-Fire.Atomic-Library:Atomic:$atomHash"){
            because("runtime")
        }
        compileOnly ("com.github.Anuken.Arc:arc-core:$arcHash"){
            because("provided")
        }
        compileOnly ("com.github.Anuken.Arc:backend-sdl:$arcHash"){
            because("provided")
        }
        compileOnly ("com.github.Anuken.Mindustry:core:$mindustryVersion"){
            because("provided")
        }

        compileOnly( group: 'org.jetbrains', name: 'annotations', version: '20.1.0'){
            because("compile")
        }
    }
}

task deploy(type: Jar) {
    dependsOn ":Desktop:jar"
}

jar {
    archiveFileName = "Ozone.jar"

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
tasks.withType(JavaCompile) {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

task makeJar{
    dependsOn jar
}
