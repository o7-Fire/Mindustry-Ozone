import java.nio.file.Files
import java.nio.file.StandardOpenOption

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testImplementation rootProject
    compileOnly (group: 'com.miglayout', name: 'miglayout-core', version: '5.2'){
        because("runtime")
    }
    compileOnly (group: 'com.miglayout', name: 'miglayout-swing', version: '5.2'){
        because("runtime")
    }
    implementation rootProject

    compileOnly ("com.github.o7-Fire.Atomic-Library:Desktop:$atomHash"){
        because("runtime")
    }
    compileOnly ("com.github.Anuken.Mindustry:desktop:$mindustryVersion"){
        because("provided")
    }
    compileOnly ("com.github.Anuken.Mindustry:annotations:$mindustryVersion"){
        because("compile")
    }



    compileOnly ("io.github.vincenzopalazzo:material-ui-swing:1.1.2-rc1"){
        because("runtime")
    }

    compileOnly ('com.github.MinnDevelopment:java-discord-rpc:v2.0.1'){
        because("provided")
    }
    compileOnly ('com.github.javaparser:javaparser-symbol-solver-core:3.16.1'){
        because("runtime")
    }
}


//Desktop jar with installer and separated library
jar {
    dependsOn ":makeJar"
    archiveFileName = "Ozone-Desktop.jar"
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from(rootDir){
        include "mod.hjson"
    }
    manifest {
        attributes 'Main-Class': 'Premain.InstallerEntryPoint'
        attributes 'SplashScreen-Image': 'gif/loading.gif'
    }
    StringBuilder sb = new StringBuilder()
    File txt = new File(rootDir, "Desktop/src/main/resources/dependencies")
    txt.parentFile.mkdirs()
    txt.delete()
    txt.createNewFile()
    configurations.compileOnly.allDependencies.each { dep ->
        sb.append('groupId=').append(dep.group).append('\n')
        sb.append('artifactId=').append(dep.name).append('\n')
        sb.append('version=').append(dep.version).append('\n')
        sb.append('type=').append(dep.reason).append('\n\n')
    }
    ArrayList<String> done = new ArrayList<>();
    project.repositories.each {
        String url = it.url
        if (url == null) return
        if (!url.toString().startsWith("http")) return
        url = url.endsWith("/") ? url.substring(0, url.length() - 1) : url
        if (done.contains(url.toString())) return
        done.add(url.toString())
        sb.append("url=").append(url).append("\n")
    }
    Files.write(txt.toPath(), sb.toString().getBytes(), StandardOpenOption.WRITE, StandardOpenOption.CREATE)
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 14
    targetCompatibility = 14
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
}